#!/bin/sh
# $HeadURL:: http://gandalf/svn/head/packages/tools/src/main/resources/bin/art#$
# $Id: article_ingest 2861 2007-06-06 07:16:23Z ebrown $
#
# Copyright (c) 2006-2008 by Topaz, Inc.
# http://topazproject.org
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

work="/tmp/gen_keytool.$$"
mkdir "$work"

trap 'rm -rf "$work"' EXIT

key_alias="tomcat"
key_alg="RSA"
#key_size="2048"
key_size="1024"
sig_alg="SHA1withRSA"
validity="3653"
passwd="changeit"

# find keytool
if ! { type keytool &> /dev/null ; } ; then
  if [[ -z "$JAVA_HOME" ]] ; then
    echo
    echo "Can't find 'keytool': No 'keytool' in path, and JAVA_HOME is not set"
    exit 1
  fi

  if ! { type "$JAVA_HOME/bin/keytool" &> /dev/null ; } ; then
    echo
    echo "Can't find 'keytool': No 'keytool' in $JAVA_HOME/bin"
    exit 1
  fi

  PATH="$JAVA_HOME/bin":${PATH}
fi

# find cacerts
if [[ -z "$JAVA_HOME" ]] ; then
  echo 
  echo "JAVA_HOME is not set"
  need_cacerts=1
elif [[ ! -r "$JAVA_HOME/jre/lib/security/cacerts" ]] ; then
  echo 
  echo "Could not find $JAVA_HOME/jre/lib/security/cacerts"
  need_cacerts=1
else
  echo 
  echo "Found $JAVA_HOME/jre/lib/security/cacerts"
  echo "Will use this for additional trusted certs"
  if [ -z "$*" ] ; then
      read -p "Is this ok? (y/n) " ans
      [[ "$ans" = y* ]] && cacerts="$JAVA_HOME/jre/lib/security/cacerts" || need_cacerts=1
  fi
fi

if [[ -n "$need_cacerts" ]] ; then
  echo
  echo "Please enter the full path to the cacerts file containing the trusted "
  echo "certs to add to the keystores; if you do not to add any additional"
  echo "trusted certs, just hit return."
  
  while : ; do 
    read -p "  location> " cacerts
    [[ -z "$cacerts" ]] && break
    [[ -r "$cacerts" ]] && break
    echo "Error: can't read '$cacerts' - please try again"
  done
fi

# get list of hosts/machines
while : ; do
    if [ -z "$*" ] ; then
	echo
	echo "Please enter the list of hosts on which the system will deployed,"
	echo "one hostname at a time; an empty name terminates the list."
	echo

	hosts=()
	while : ; do
	    read -p '  Hostname> ' host
	    [[ -z "$host" ]] && break;
	    hosts=("${hosts[@]}" "$host")
	done
    else
	for host in $* ; do
	    hosts=("${hosts[@]}" "$host")
        done
    fi

    echo
    echo "Keystores will be generated for the following hosts:"
    for h in "${hosts[@]}" ; do
	echo "  '$h'"
    done

    if [ -z "$*" ] ; then    
	read -p "Is this correct? (y/n) " ans
	if [[ "$ans" = y* ]] ; then break; fi
    else
	break;
    fi
done

# generate keys and self-signed cers
echo
echo "Generating keys and certificates - this may take a while"

for h in "${hosts[@]}" ; do
  echo -n "."

  ks="$work/keystore.$h.jks"
  if [[ -n "$cacerts" ]] ; then
    cp "$cacerts" "$ks"
    chmod 640 "$ks"
  fi

  keytool -genkey -alias "$key_alias" -keyalg "$key_alg" -keysize "$key_size" \
	  -sigalg "$sig_alg" -dname "cn=$h" -validity "$validity" \
	  -keystore "$ks" -keypass "$passwd" -storepass "$passwd"

  keytool -export -alias "$key_alias" -file "$work/cert.$h" \
	  -keystore "$ks" -storepass "$passwd" 2> /dev/null
done

# add all new certs to all keystores
echo
echo "Adding all certs to all keystores"

for h in "${hosts[@]}" ; do
  echo -n "."

  for c in "$work/"cert.* ; do
    alias="${c#*/cert.}"
    [[ "$alias" = "$h" ]] && continue

    keytool -import -noprompt -trustcacerts -alias "$alias" -file "$c" \
	    -keystore "$work/keystore.$h.jks" -storepass "$passwd" 2> /dev/null
  done
done

# clean up
ks=`cd "$work"; ls keystore.*.jks`
mv "$work"/keystore.*.jks /tmp/

echo
echo "All done. The generated keystores can be found in /tmp/:"
echo "$ks"
echo
echo "Please copy these to the appropriate machines as /etc/topaz/keystore.jks"
echo
