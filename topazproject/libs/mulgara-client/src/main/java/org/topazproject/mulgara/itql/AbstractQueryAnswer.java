/* $HeadURL::                                                                            $
 * $Id$
 *
 * Copyright (c) 2006 by Topaz, Inc.
 * http://topazproject.org
 *
 * Licensed under the Educational Community License version 1.0
 * http://opensource.org/licenses/ecl1.php
 */
package org.topazproject.mulgara.itql;

import java.net.URISyntaxException;

import org.jrdf.graph.GraphElementFactory;
import org.jrdf.graph.GraphElementFactoryException;

import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

/** 
 * This provides some common help in parsing an answer to a set of iTQL commands.
 * 
 * @author Ronald Tschal√§r
 */
public abstract class AbstractQueryAnswer {
  /** The {@value} element */
  protected static final String VARS       = "variables";
  /** The {@value} element */
  protected static final String SOLUTION   = "solution";
  /** The {@value} attribute */
  protected static final String RSRC_ATTR  = "resource";
  /** The {@value} attribute */
  protected static final String BNODE_ATTR = "blank-node";

  /** the list of variables in the answer */
  protected String[] variables;

  /** 
   * Parse an answer to a single query. This invokes {@link #setVariables setVariables} once to set
   * the variables, and {@link #parseRow parseRow} for each solution.
   * 
   * @param query the "query" element
   * @param gef   the factory to use to create jrdf instances
   */
  protected void parseQueryAnswer(Element query, GraphElementFactory gef)
      throws URISyntaxException, GraphElementFactoryException, AnswerException {
    Element varsElem = XmlHelper.getFirstChild(query, VARS);
    if (varsElem == null)
      throw new IllegalArgumentException("could not parse query element - no variables found");

    NodeList varElems = XmlHelper.getChildren(varsElem, "*");
    String[] vars = new String[varElems.getLength()];
    for (int idx2 = 0; idx2 < varElems.getLength(); idx2++)
      vars[idx2] = varElems.item(idx2).getNodeName();

    setVariables(vars);

    for (Element sol = XmlHelper.getFirstChild(query, SOLUTION); sol != null;
         sol = XmlHelper.getNextSibling(sol, SOLUTION)) {
      parseRow(sol, gef);
    }
  }

  /** 
   * Set the list of variables. 
   * 
   * @param vars  the variables in the answer
   * @throws AnswerException 
   */
  protected void setVariables(String[] vars) throws AnswerException {
    variables = vars;
  }

  /** 
   * Parse a single solution (row). This invokes {@link #parseVariable parseVariable} for each
   * value in the row, and then invokes {@link #addRow addRow}.
   *
   * @param solution the solution element
   * @param gef      the factory to use to create jrdf instances
   */
  protected void parseRow(Element solution, GraphElementFactory gef)
      throws URISyntaxException, GraphElementFactoryException, AnswerException {
    Object[] row = new Object[variables.length];

    for (int idx3 = 0; idx3 < row.length; idx3++)
      row[idx3] = parseVariable(XmlHelper.getOnlyChild(solution, variables[idx3], null), gef);

    addRow(row);
  }

  /** 
   * Parse the value of a single variable. If a subclass overrides {@link #parseRow parseRow} then
   * this may be a dummy. 
   * 
   * @param v   the value element; the name of the element is the name of variable to which this
   *            value is to be bound
   * @param gef the factory to use to create jrdf instances
   * @return the object representing the value to place in the row
   */
  protected abstract Object parseVariable(Element v, GraphElementFactory gef)
      throws URISyntaxException, GraphElementFactoryException, AnswerException;

  /** 
   * Add the given row to the internal list of rows. If a subclass overrides {@link #parseRow
   * parseRow} then this may be a dummy. 
   * 
   * @param row the list of values making up the row; each value was generated by
   *            {@link #parseVariable parseVariable}
   * @throws AnswerException 
   */
  protected abstract void addRow(Object[] row) throws AnswerException;
}
