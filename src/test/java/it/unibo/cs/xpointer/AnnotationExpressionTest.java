package it.unibo.cs.xpointer;

import java.io.IOException;
import java.io.StringReader;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.FactoryConfigurationError;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.TransformerException;

import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.ranges.Range;

import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;

import it.unibo.cs.xpointer.datatype.LocationList;

import junit.framework.TestCase;

/**
 * Test for the expression generated by java-script clients for annotations.
 *
 * @author Pradeep Krishnan
 */
public class AnnotationExpressionTest extends TestCase {
  private static final String testXml =
    "<doc><chapter><title>Chapter I</title><para>Hello world, indeed, <em>wonderful</em> world</para></chapter></doc>";

  //
  private Node document;

  /**
   * Creates a new UniboTest object.
   *
   * @param testName name of the test
   */
  public AnnotationExpressionTest(String testName) {
    super(testName);
  }

  /**
   * Sets up the test.
   *
   * @throws SAXException on parse failure
   * @throws ParserConfigurationException on parse failure
   * @throws IOException on parse failure
   */
  protected void setUp() throws SAXException, ParserConfigurationException, IOException {
    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
    DocumentBuilder        builder = factory.newDocumentBuilder();
    document = builder.parse(new InputSource(new StringReader(testXml))).getDocumentElement();
  }

  /**
   * Do the test
   *
   * @throws TransformerException if there is an error in xpointer eval
   */
  public void test01() throws TransformerException {
    // The range that a user selects for annotation
    String annotated = "xpointer(string-range(/doc/chapter,'ter IHello world, indeed, wo')[1])";

    // The xpath expression that the java-script annotation client creates 
    String expression =
      "xpointer(string-range(/doc/chapter/title,'')[5]/range-to(string-range(/doc/chapter/para/em,'')[3]))";

    LocationList list = XPointerAPI.evalFullptr(document, expression);

    assertNotNull(list);
    assertEquals(list.getLength(), 1);

    Location location = list.item(0);

    assertEquals(location.getType(), Location.RANGE);

    Range expressionRange = (Range) location.getLocation();

    list = XPointerAPI.evalFullptr(document, annotated);

    assertNotNull(list);
    assertEquals(list.getLength(), 1);

    location = list.item(0);

    assertEquals(location.getType(), Location.RANGE);

    Range annotatedRange = (Range) location.getLocation();
    System.out.println("annotated-range :" + annotatedRange);
    System.out.println("expression-range:" + expressionRange);
    assertEquals("annotated range and expression range differ", annotatedRange.toString(),
                 expressionRange.toString());
  }
}
